{
  "name": "jxnblk/react-context-router",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.19"
  },
  "title": "React Context Router",
  "branch": "",
  "style": {
    "name": "Brutalist",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BasicHeader",
      "article": "article/MarkdownArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Consolas, \"Liberation Mono\", Menlo, Courier, monospace",
    "heading": {},
    "typeScale": [
      48,
      32,
      20,
      18,
      16,
      14,
      12
    ],
    "layout": {
      "maxWidth": 1024,
      "fluid": true
    },
    "colors": {
      "text": "#333",
      "background": "#fff",
      "primary": "#666",
      "secondary": "#888",
      "highlight": "#1f80ff",
      "muted": "#f6f6f6",
      "border": "#eee"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/jxnblk/react-context-router",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/react-context-router",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "react-context-router",
      "subhead": "Minimal React router based on React context",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "react-context-router: Minimal React router based on React context",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "jxnblk",
          "repo": "react-context-router"
        }
      ],
      "text": "v1.1.0"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n\n<p><a href=\"https://travis-ci.org/jxnblk/react-context-router\"></a></p>\n<pre>npm i react-context-router</pre><p><a href=\"https://github.com/reactjs/react-router\">React Router</a> is an excellent routing solution,\nbut sometimes it does a lot more than you need it to.\nThis is intended to be a smaller option with a simpler API.</p>\n<h2>Features</h2>\n<ul>\n<li>Small-ish package ~5KB</li>\n<li>Simple API</li>\n<li>One higher order component and two components: Router &amp; Link</li>\n<li>Pass props directly to any component</li>\n<li>Pass anything through route context</li>\n</ul>\n<h2>Usage</h2>\n<pre><span class=\"hljs-comment\">// App.js</span>\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react&apos;</span>\n<span class=\"hljs-keyword\">import</span> { createRouter, Link } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react-context-router&apos;</span>\n\n<span class=\"hljs-keyword\">const</span> NotFound = () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Not Found<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n\n<span class=\"hljs-keyword\">const</span> Nav = () =&gt; (\n  &lt;nav&gt;\n    &lt;Link href=&apos;/&apos; children=&apos;Home&apos; /&gt;\n    &lt;Link href=&apos;/posts/1&apos; children=&apos;First Post&apos; /&gt;\n  &lt;/nav&gt;\n)\n\nclass App extends React.Component {\n  render () {\n    const { route } = this.props\n    const Comp = route.component || NotFound\n\n    return (\n      &lt;div&gt;\n        &lt;Nav /&gt;\n        &lt;Comp /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default createRouter(App)</pre><pre><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react&apos;</span>\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;react-dom&apos;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./App&apos;</span>\n<span class=\"hljs-keyword\">import</span> Index <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./Index&apos;</span>\n<span class=\"hljs-keyword\">import</span> Post <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;./Post&apos;</span>\n\n<span class=\"hljs-keyword\">const</span> routes = [\n  {\n    path: <span class=\"hljs-string\">&apos;/&apos;</span>,\n    <span class=\"hljs-comment\">// Put any other route data here.</span>\n    <span class=\"hljs-comment\">// This object will be provided through</span>\n    <span class=\"hljs-comment\">// React context to the Router&apos;s children.</span>\n    component: Index\n  },\n  {\n    path: <span class=\"hljs-string\">&apos;/posts/:id&apos;</span>,\n    component: Post\n  }\n]\n\n<span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&apos;app&apos;</span>)\n\nReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">routes</span>=<span class=\"hljs-string\">{routes}</span>&gt;</span>, div)</span></pre><h2>Server-side rendering</h2>\n<p>Pass a <code>pathname</code> to the Router component to populate the context for a particular route.</p>\n<pre><span class=\"hljs-keyword\">const</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;react&apos;</span>)\n<span class=\"hljs-keyword\">const</span> ReactDOM = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;react-dom&apos;</span>)\n<span class=\"hljs-keyword\">const</span> h = React.createElement\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;./App&apos;</span>)\n\n<span class=\"hljs-keyword\">const</span> routes = [\n  {\n    path: <span class=\"hljs-string\">&apos;/&apos;</span>,\n    name: <span class=\"hljs-string\">&apos;Index&apos;</span>\n  },\n  {\n    path: <span class=\"hljs-string\">&apos;/posts/:id&apos;</span>,\n    name: <span class=\"hljs-string\">&apos;Post&apos;</span>\n  }\n]\n\n<span class=\"hljs-keyword\">const</span> html = ReactDOMServer.renderToString(\n  h(App, {\n    routes,\n    <span class=\"hljs-comment\">// Pass a value to the pathname prop for server side rendering</span>\n    pathname: <span class=\"hljs-string\">&apos;/posts/32&apos;</span>\n  })\n)</pre><h2>API</h2>\n<h3><code>createRouter</code></h3>\n<p>Higher order component that provides history and route data through context.</p>\n<h4><code>routes</code> prop</h4>\n<p>Array of route objects. Each route must include a <code>path</code>.\nAny other value added to the object will be provided through context as the <code>route</code> object when the location matches the path.</p>\n<h4><code>pathname</code> prop</h4>\n<p>Manually pass in a pathname to set the current path for server-side rendering.</p>\n<h4>Child Context</h4>\n<p>The wrapped component provides the following objects as context to its children:</p>\n<ul>\n<li><code>history</code> wrapped <code>window.history</code> object with <code>listen</code> and <code>push</code> methods</li>\n<li><code>route</code> object from the matching item in the <code>routes</code> prop. When a path contains parameters they will be passed as <code>route.params</code>.</li>\n</ul>\n<h3><code>&lt;Router /&gt;</code> component</h3>\n<p>Component wrapped with <code>createRouter</code>, provided as a convenience.</p>\n<h3><code>&lt;Link /&gt;</code> component</h3>\n<p>Used in place of <code>&lt;a&gt;</code> links to use client-side history navigation.</p>\n<h3>Size comparison</h3>\n<p>Gzip:</p>\n<ul>\n<li>react-context-router: 19.04 KB (5.13 KB without React)</li>\n<li>react-router: 40.29 KB with React</li>\n<li>Baseline react 14.52 KB</li>\n</ul>\n<p><em>Results from <a href=\"https://npmjs.com/package/bundle-size\">bundle-size</a></em></p>\n<p>MIT License</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/jxnblk/react-context-router",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/jxnblk",
          "text": "jxnblk"
        }
      ]
    }
  ]
}